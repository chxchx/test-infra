// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vmserver.proto

/*
Package vm is a generated protocol buffer package.

It is generated from these files:
	vmserver.proto

It has these top-level messages:
	VMConfig
	VMInstance
	Client
	Done
*/
package vm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VMConfig struct {
	ClientNamespace string `protobuf:"bytes,1,opt,name=clientNamespace" json:"clientNamespace,omitempty"`
}

func (m *VMConfig) Reset()                    { *m = VMConfig{} }
func (m *VMConfig) String() string            { return proto.CompactTextString(m) }
func (*VMConfig) ProtoMessage()               {}
func (*VMConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VMConfig) GetClientNamespace() string {
	if m != nil {
		return m.ClientNamespace
	}
	return ""
}

type VMInstance struct {
	VmName string `protobuf:"bytes,1,opt,name=vmName" json:"vmName,omitempty"`
}

func (m *VMInstance) Reset()                    { *m = VMInstance{} }
func (m *VMInstance) String() string            { return proto.CompactTextString(m) }
func (*VMInstance) ProtoMessage()               {}
func (*VMInstance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VMInstance) GetVmName() string {
	if m != nil {
		return m.VmName
	}
	return ""
}

type Client struct {
	ClientNamespace string `protobuf:"bytes,1,opt,name=clientNamespace" json:"clientNamespace,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Client) GetClientNamespace() string {
	if m != nil {
		return m.ClientNamespace
	}
	return ""
}

type Done struct {
}

func (m *Done) Reset()                    { *m = Done{} }
func (m *Done) String() string            { return proto.CompactTextString(m) }
func (*Done) ProtoMessage()               {}
func (*Done) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*VMConfig)(nil), "vm.VMConfig")
	proto.RegisterType((*VMInstance)(nil), "vm.VMInstance")
	proto.RegisterType((*Client)(nil), "vm.Client")
	proto.RegisterType((*Done)(nil), "vm.Done")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Preprovision service

type PreprovisionClient interface {
	Acquire(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*VMInstance, error)
	Release(ctx context.Context, in *VMInstance, opts ...grpc.CallOption) (*Done, error)
	KeepAlive(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Done, error)
}

type preprovisionClient struct {
	cc *grpc.ClientConn
}

func NewPreprovisionClient(cc *grpc.ClientConn) PreprovisionClient {
	return &preprovisionClient{cc}
}

func (c *preprovisionClient) Acquire(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*VMInstance, error) {
	out := new(VMInstance)
	err := grpc.Invoke(ctx, "/vm.Preprovision/Acquire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprovisionClient) Release(ctx context.Context, in *VMInstance, opts ...grpc.CallOption) (*Done, error) {
	out := new(Done)
	err := grpc.Invoke(ctx, "/vm.Preprovision/Release", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprovisionClient) KeepAlive(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Done, error) {
	out := new(Done)
	err := grpc.Invoke(ctx, "/vm.Preprovision/KeepAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Preprovision service

type PreprovisionServer interface {
	Acquire(context.Context, *VMConfig) (*VMInstance, error)
	Release(context.Context, *VMInstance) (*Done, error)
	KeepAlive(context.Context, *Client) (*Done, error)
}

func RegisterPreprovisionServer(s *grpc.Server, srv PreprovisionServer) {
	s.RegisterService(&_Preprovision_serviceDesc, srv)
}

func _Preprovision_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprovisionServer).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.Preprovision/Acquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprovisionServer).Acquire(ctx, req.(*VMConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preprovision_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprovisionServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.Preprovision/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprovisionServer).Release(ctx, req.(*VMInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preprovision_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprovisionServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.Preprovision/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprovisionServer).KeepAlive(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

var _Preprovision_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vm.Preprovision",
	HandlerType: (*PreprovisionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acquire",
			Handler:    _Preprovision_Acquire_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Preprovision_Release_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _Preprovision_KeepAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vmserver.proto",
}

func init() { proto.RegisterFile("vmserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x3b, 0x4b, 0xc4, 0x40,
	0x10, 0xc7, 0x8d, 0xc8, 0xde, 0xdd, 0x70, 0x9c, 0x30, 0x85, 0xc8, 0x55, 0xba, 0x5a, 0xc4, 0x26,
	0x45, 0xf4, 0x0b, 0x84, 0xd8, 0x88, 0x44, 0x24, 0x45, 0xfa, 0x75, 0x19, 0x65, 0x21, 0xfb, 0x70,
	0x37, 0x6e, 0xef, 0x37, 0x97, 0xcd, 0x03, 0x21, 0xdd, 0x95, 0xff, 0xc7, 0xcc, 0xfc, 0x18, 0x38,
	0x44, 0x1d, 0xc8, 0x47, 0xf2, 0x85, 0xf3, 0x76, 0xb0, 0x78, 0x1e, 0x35, 0x7f, 0x82, 0x6d, 0xd7,
	0xd4, 0xd6, 0x7c, 0xaa, 0x2f, 0xcc, 0xe1, 0x52, 0xf6, 0x8a, 0xcc, 0xf0, 0x26, 0x34, 0x05, 0x27,
	0x24, 0x5d, 0x67, 0x37, 0x59, 0xbe, 0x6b, 0xd7, 0x36, 0xbf, 0x07, 0xe8, 0x9a, 0x17, 0x13, 0x06,
	0x61, 0x24, 0xe1, 0x15, 0xb0, 0xa8, 0x53, 0x38, 0xd7, 0x67, 0xc5, 0x4b, 0x60, 0xf5, 0x38, 0x78,
	0xc2, 0x66, 0x06, 0x17, 0xcf, 0xd6, 0x50, 0xf9, 0x9b, 0xc1, 0xfe, 0xdd, 0x93, 0xf3, 0x36, 0xaa,
	0xa0, 0xac, 0xc1, 0x07, 0xd8, 0x54, 0xf2, 0xfb, 0x47, 0x79, 0xc2, 0x7d, 0x11, 0x75, 0xb1, 0x50,
	0x1f, 0x0f, 0x93, 0x5a, 0x68, 0xf8, 0x19, 0xde, 0xc1, 0xa6, 0xa5, 0x9e, 0x44, 0x20, 0x5c, 0x85,
	0xc7, 0x6d, 0xd2, 0xe9, 0x00, 0xde, 0xc2, 0xee, 0x95, 0xc8, 0x55, 0xbd, 0x8a, 0x84, 0x90, 0xec,
	0x89, 0xf5, 0xbf, 0xf2, 0xc1, 0xc6, 0x37, 0x3d, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x5c,
	0x51, 0xfb, 0x38, 0x01, 0x00, 0x00,
}
